import sat.

test =>
    M = {{_,_},{_,_}},
    hcp_grid(M),
    solve(M),
	foreach (R in M)
	    writeln(R)
	end,
	nl,
    fail.

grid_check_matrix(A,Source,NRows,NCols) =>
    (array(A) -> true; handle_exception($array_expected(A),Source)),
    NRows = len(A),
    foreach (R in 1..NRows)
        (array(A[R]) -> true; handle_exception($array_expected(A[R]),Source))
    end,
    NCols = len(A[1]).

hcp_grid(G) =>
    grid_check_matrix(G,hcp_grid,NRows,NCols),
	Vs = [{(R,C), G[R,C]} : R in 1..NRows, C in 1..NCols],
	Es = [{(R,C),(R1,C1),_} : R in 1..NRows, C in 1..NCols, grid_neibs(G,NRows,NCols,R,C,Neibs), (R1,C1) in Neibs],
    hcp(Vs,Es,_K).

hcp_grid(G,Es) =>
    grid_check_matrix(G,hcp_grid,NRows,NCols),
	Vs = [{(R,C), G[R,C]} : R in 1..NRows, C in 1..NCols],
    hcp(Vs,Es,_K).

hcp_grid(G,Es,K) =>
    grid_check_matrix(G,hcp_grid,NRows,NCols),    
	Vs = [{(R,C), G[R,C]} : R in 1..NRows, C in 1..NCols],
	hcp(Vs,Es,K).

hcp(Vs,Es) =>
    hcp(Vs,Es,_).

hcp(Vs,Es,K) =>
    VNumMap = new_map(),
    hcp_scc_check_vs(Vs,1,N,VNumMap,hcp),
    AdjMap = new_map(),
    hcp_scc_check_es(Es,VNumMap,AdjMap,hcp),
    hcp_aux(Vs,Es,N,K,VNumMap,AdjMap).

%%
hcp_scc_check_vs([],I,N,_VNumMap,_Source) => N = I-1.
hcp_scc_check_vs([{V,B}|Vs],I,N,VNumMap,Source) =>
    hcp_scc_check_vertex(V,Source),
    hcp_scc_check_b(B,Source),
    (VNumMap.has_key(V) ->
        handle_exception($duplicated_vertex_name(V), Source)
    ;
        VNumMap.put(V,I)
    ),
    I1 is I+1,
    hcp_scc_check_vs(Vs,I1,N,VNumMap,Source).

hcp_scc_check_vertex(V,_Source), ground(V) => true.
hcp_scc_check_vertex(V,Source) =>
    handle_exception($ground_expected(V), Source).

hcp_scc_check_b(B,_Source), var(B) => bp.domain(B,0,1).
hcp_scc_check_b(0,_Source) => true.
hcp_scc_check_b(1,_Source) => true.
hcp_scc_check_b(B,Source) =>
    handle_exception($int_dvar_expected(B), Source).

hcp_scc_check_es([],_VNumMap,_AdjMap,_Source) => true.
hcp_scc_check_es([{V1,V2,B}|Es],VNumMap,AdjMap,Source) =>
    hcp_scc_check_vertex(V1,Source),
    hcp_scc_check_vertex(V2,Source),
    I1 = VNumMap.get(V1,0),
    (I1 == 0 -> handle_exception($unknown_vertex_name(V1), Source); true),
    I2 = VNumMap.get(V2,0),
    (I2 == 0 -> handle_exception($unknown_vertex_name(V2), Source); true),
    Neibs = AdjMap.get(I1,[]),
    AdjMap.put(I1,[I2|Neibs]),
    hcp_scc_check_b(B,Source),
    hcp_scc_check_es(Es,VNumMap,AdjMap,Source).

hcp_aux(Vs,Es,N,K,VNumMap,AdjMap), hcp_all_vs_in(Vs) =>   % convert this to circuit
    K = N,
    A = new_array(N),
    A :: 1..N,
    foreach (I in 1..N)
        D = AdjMap.get(I),
        A[I] :: D
    end,
    foreach ({V1,V2,B} in Es)
        I1 = VNumMap.get(V1),
        I2 = VNumMap.get(V2),
        A[I1] #= I2 #<=> B
    end,
    circuit(A).
hcp_aux(Vs,Es,N,K,VNumMap,_AdjMap) =>
    A = {B : {_,B} in Vs},                      % A[I] = 1 iff I is in the graph
    NZeros = sum([1 : {_,B} in Vs, B == 0]),
    MinK = sum([1 : {_,B} in Vs, B == 1]),
    MaxK = max(N-NZeros,1),
    K :: MinK..MaxK,
    sum([B : {_,B} in Vs, B !== 0]) #= K,
    (MinK > 2 ->
        KGt2 = 1,
        KGt1 = 1
    ;
        KGt2 #<=> (K #> 2),
        KGt1 #<=> (K #> 1),
        KGt2 #=> KGt1
    ),
    H = new_array(N,N),                         % H[I,J] = 1 iff (I,J) is in the cycle
    foreach ({V1,V2,B} in Es)
        I1 = VNumMap.get(V1),
        I2 = VNumMap.get(V2),
        H[I1,I2] = B,
		B #=> A[I1],
		B #=> A[I2]
    end,
    foreach (I in 1..N, J in 1..N)
        Cell = H[I,J], 
        if var(Cell) && not dvar(Cell) then
            Cell = 0
        end
    end,
    foreach (I in 1..N)                             % each vertex has exactly one incoming and one outgoing edge
        A[I] #/\ KGt1 #=> sum([H[I,J] : J in 1..N]) #= 1,
        A[I] #/\ KGt1 #=> sum([H[J,I] : J in 1..N]) #= 1        
    end,
    % ban sub-cycles
    hcp_scc_choose_start(A,N,KGt1,MinK,Start),    % Start[I] = 1 iff the cycle starts at vertex I
    P = new_array(N),                               % each in-cycle vertex is mapped to a unique position
    NB is round(log(2,N)+0.5),                      % number of bits needed by log encoding
    Max is 2**NB-1,
    P :: 0..Max,
    foreach (I in 1..N)
        bp.sat_encode_dvar(P[I],_),                 % get the log encoding
        #~A[I] #<=> P[I] #= 0
    end,
    foreach (I in 1..N)
        Start[I] #=> P[I] #= 1,
        foreach (J in 1..N, I !== J, H[I,J] !== 0)
            H[I,J] #=> #~H[J,J],
            H[I,J] #=> #~H[I,I],
            if I < J then
                #~KGt2 #\/ #~H[I,J] #\/ #~H[J,I]   % no cycle of size 2
            end,
            entail_lfsr_succ(NB, #~Start[J], H[I,J], P[I], P[J])
        end
    end.

hcp_all_vs_in(Vs) =>
    foreach ({_,B} in Vs)
        B == 1
    end.

%
% Start and HasStarted must follow the following pattern:
%      Start = 0 ... 0 1 0 ... 0
% HasStarted = 0 ... 0 1 1 ... 1
%
hcp_scc_choose_start(A,N,KGt1,MinK,Start) =>
    Start = new_array(N),                   % Start[I] = 1 iff the cycle starts at vertex I
    Start :: 0..1,                          
    foreach (I in 1..N)
        #~A[I]  #=> #~Start[I]              % I is not in the cycle
    end,
    HasStarted = new_array(N),              % HasStarted[I] iff there exists I1 (I1 =< I) such that Start[I1]
    HasStarted :: 0..1,
    (MinK > 1 ->
        HasStarted[N-MinK+1] #= 1
    ;
        KGt1 #=> HasStarted[N]
    ),
    A[1] #=> Start[1],
    HasStarted[1] #<=> Start[1],
    foreach (I in 2..N)
        HasStarted[I-1] #=> HasStarted[I],
        Start[I] #=> #~HasStarted[I-1],
        Start[I] #=> HasStarted[I],
        #~A[I] #\/ HasStarted[I-1] #\/ Start[I],               % (A[I] #/\ #~HasStarted[I-1]) #=> Start[I],
        #~HasStarted[I] #\/ Start[I] #\/ HasStarted[I-1]       % (HasStarted[I] #/\ #~Start[I]) #=> HasStarted[I-1]
    end.
