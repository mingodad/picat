/*
  Some general utilities in Picat.

  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

  Updated by Neng-Fa Zhou.
*/

module utils.

%
% Convert a 2D array to a list
%
array_matrix_to_list(A) = L =>
    NRows = A.length,
    NCols = A[1].length,
    L = [A[I,J] : I in 1..NRows, J in 1..NCols].

% Convert an 2D array to a 2D matrix of lists
array_matrix_to_list_matrix(A) = L =>
    L = [A[I].to_list() : I in 1..A.length].

% match a string
%   find(String, Substring,From,To)
%
% (If we want to have multiple results it must be a predicate,
%  not a function.)
find(String, Substring, From, To) =>
    SubLen = Substring.length,
    bp.append(Pre,Substring,_,String),
    From = Pre.length+1,
    To = From+SubLen-1.

% Case insensitive match
find_ignore_case(String, Substring, From, To) =>
    String2 = String.to_lowercase(),
    Substring2 = Substring.to_lowercase(),
    find(String2,Substring2,From,To).

% higher-order filer
filter([], _Goal) = [].
filter([E|Es], Goal) = L, call(Goal,E) => 
    L=[E|L1],
    L1=filter(Es, Goal).
filter([_E|Es], Goal) = filter(Es, Goal).

%
% Flatten a list of nested lists.
%
flatten([]) = [] => true.
flatten([L|Ls]) = FlatL =>
    NewL = flatten(L),
    NewLs = flatten(Ls),
    FlatL = NewL++NewLs.
flatten(L) = [L] => true.

%% higher-order fold
fold(_F,Acc,[]) = Acc.
fold(F,Acc,[H|T])=fold(F, apply(F,H,Acc),T).

even(N) => N mod 2 == 0.

%
% Map.get() with a default value if Key don't exist in Map
%
get(M, Key, Default)=V =>
   if M.has_key(Key) then V= M.get(Key) else V=Default end.

%
% Join a list of strings with a join character.
% Res = join(String,JoinChar)
%
join(S) = join(S," ").

join(S, JoinAtm) = join(S, Str), atom(JoinAtm) => Str=JoinAtm.to_string().
join(S,JoinStr) = Res, string(JoinStr) => join_aux(S,JoinStr,Res).

private
join_aux([],_JoinStr,Res)  => Res=[].
join_aux([W|Str],JoinStr,Res)  => 
    once(append(W,Res1,Res)),
    (Str==[]-> 
	Res2=Res1
    ;
        once(append(JoinStr,Res2,Res1))
    ),
    join_aux(Str,JoinStr,Res2).

% higher-order map/2
map(_F,[]) = [].
map(F,[X|Xs])=[apply(F,X)|map(F,Xs)].

% higher-order map/3
map(_F,[],[]) = [].
map(F,[X|Xs],[Y|Ys])=[apply(F,X,Y)|map(F,Xs,Ys)].


% A*B=C
matrix_multi(A,B) = C =>
    C = new_array(A.length,B[1].length),
    foreach(I in 1..A.length, J in 1..B[1].length)
        C[I,J] = sum([A[I,K]*B[K,J] : K in 1..A[1].length])
    end.

odd(N) => N mod 2 == 1.

% generate permutations
% (from exs.pi)
perm([]) = [[]].
perm([H|T]) = [insert(P,I,H) : P in Ps, I in 1..P.length+1] => Ps = perm(T).

% generate the power set
power_set([]) = [[]].
power_set([H|T]) = P1++P2 =>
    P1 = power_set(T),
    P2 = [[H|S] : S in P1].

% Sieve of Eratosthenes
primes(N)=L =>
    A=new_array(N),
    foreach(I in 2..floor(sqrt(N)))
        if (var(A[I])) then
            foreach(J in I**2..I..N)
                A[J]=0
            end
         end
     end,
     L=[I : I in 2..N, var(A[I])].

%
% Split a string into tokens given some split chars
% List = split(String, Seperators)
%
split(Str) = split(Str," \t\n\r").  % use white spaces as the default set of separators

split([],_Seperators) = Ts => Ts=[].
split([C|S],Seperators)=Ts,membchk(C,Seperators) =>
   Ts=split(S,Seperators).
split([C|S],Seperators) = [[C|T]|Ts] =>
   extract_token(S,Seperators,T,Ts).

private
extract_token([],_Seperators,T,Ts) => T=[], Ts=[].
extract_token([C|S],Seperators,T,Ts),membchk(C,Seperators) =>
    T = [],
    Ts = split(S,Seperators).
extract_token([C|S],Seperators,T,Ts) =>
    T=[C|TR],
    extract_token(S,Seperators,TR,Ts).

%
% Generate a "real" random number.
% random() repeat itself each time the program starts.
%
random2() = Rand =>
   statistics(runtime,[A,B]), 
   statistics(program,[C,D]), 
   statistics(heap,[E,F]), 
   Rand = random(10*A+B+10*C+13*D+11*E+101*F mod 100001).

%
% Read a file and return it as a list, i.e.
% no split is done as in slurp_file/1.
%
slurp_file_chars(File) = Chars =>
    FD = open(File),
    Chars = read_file_chars(FD),
    close(FD).

%
% Read a file and returns as a list of lines.
%
% Note: For larger files, it might be better to
%       loop throught the file line by line using
%       read_line/1.
%
slurp_file_lines(File) = Lines =>
    FD = open(File),
    Lines = read_file_lines(FD),
    close(FD).

private
read_file_lines(FD) = Lines =>
    Line = FD.read_line(),
    read_file_lines_aux(FD,Line,Lines).

private
read_file_lines_aux(_FD,end_of_file,Lines) => Lines=[].
read_file_lines_aux(FD,Line,Lines) =>
    Lines=[Line|LinesR],
    read_file_lines_aux(FD,FD.read_line(),LinesR).

% 
% Writes CPU time and backtracks for goal Goal.
% 
% Use $predicate in the call, e.g.
%   time2($predicate(A,B,C))
%
time2(Goal) =>
    statistics(runtime,_),
    statistics(backtracks, Backtracks1),
    (call(Goal); true),
    statistics(backtracks, Backtracks2),
    statistics(runtime, [_,End]),
    T = End / 1000.0,
    Backtracks = Backtracks2 - Backtracks1,
    writef("CPU time %2.5f seconds. Backtracks: %d\n", T, Backtracks).

%
% Transpose a 2D matrix
%
transpose(Matrix) = Transposed,array(Matrix) =>  % array matrix
    N = Matrix.length,
    M = Matrix[1].length,
    Transposed=new_array(M,N),
    foreach(I in 1..N, J in 1..M)
        Transposed[J,I] = Matrix[J,I]
    end.
transpose(Matrix) = Transposed =>  % assumed to be list matrix
    N = Matrix.length,
    M = Matrix[1].length,
    Transposed = [Matrix[J,I] : I in 1..N, J in 1..M].

% Show all the statistics
statistics_all() = L =>
   L = findall([Name,Value], $statistics(Name,Value)).

