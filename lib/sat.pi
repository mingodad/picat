module sat.
import common_constr.

% '#!='(X,Y) =>  X #!= Y.
% '#/\\'(X,Y) =>  X #/\ Y.
% '#<'(X,Y) =>  X #< Y.
% '#<='(X,Y) =>  X #=< Y.
% '#<=>'(X,Y) =>  X #<=> Y.
% '#='(X,Y) => X #= Y.
% '#=<'(X,Y) =>  X #=< Y.
% '#=>'(X,Y) =>  X #=> Y.
% '#>'(X,Y) =>  X #> Y.
% '#>='(X,Y) =>  X #>= Y.
% '#\\/'(X,Y) =>  X #\/ Y.
% '#^'(X,Y) =>  X #^ Y.
% '#~'(X) =>  #~ X.
%  '::'(Vars,Domain) => '::'(Vars,Domain).
% all_different(FDVars) => all_different(FDVars).
% all_different_except_0(Xs) => all_different_except_0(Xs).
% all_distinct(FDVars) => all_distinct(FDVars).
% assignment(FDVars1,FDVars2) => assignment(FDVars1,FDVars2).
% at_most(N,X,V) => at_most(N,X,V).
% at_least(N,X,V) => at_least(N,X,V).
% circuit(L) => circuit(L).
% count(V,FDVars,Rel,N) => count(V,FDVars,Rel,N).
% cumulative(Starts,Durations,Resources,Limit) => cumulative(Starts,Durations,Resources,Limit).
% decreasing(FDVars) => decreasing(FDVars).
% decreasing_strict(FDVars) => decreasing_strict(FDVars).
% diffn(RectangleList) => diffn(RectangleList).
% disjunctive_tasks(Tasks) => disjunctive_tasks(Tasks).
% element(I,FDVars,V) => element(I,FDVars,V).
% exactly(N, X, V) => exactly(N, X, V).
% fd_disjoint(DVar1,DVar2) => fd_disjoint(DVar1,DVar2).
% fd_dom(FDVar) = fd_dom(FDVar).
% fd_false(FDVar,Elm) => fd_false(FDVar,Elm).
% fd_max(FDVar) = fd_max(FDVar).
% fd_min(FDVar) = fd_min(FDVar).
% fd_min_max(FDVar,Min,Max) => fd_min_max(FDVar,Min,Max).
% fd_next(FDVar,Elm) = fd_next(FDVar,Elm).
% fd_prev(FDVar,Elm) = fd_prev(FDVar,Elm).
% fd_size(FDVar) = fd_size(FDVar).
% fd_true(FDVar,Elm) => fd_true(FDVar,Elm).
% fd_vector_min_max(Min,Max) => fd_vector_min_max(Min,Max).
% global_cardinality(FDVars,Pairs) => global_cardinality(FDVars,Pairs).
% increasing(FDVars) => increasing(FDVars).
% increasing_strict(FDVars) => increasing_strict(FDVars).
% lex_le(L1,L2) = > lex_le(L1,L2).
% lex_lt(L1,L2) = > lex_lt(L1,L2).
% matrix_element(M,I,J,MIJ) => matrix_element(M,I,J,MIJ).
% neqs(Neqs) => neqs(Neqs).
% new_dvar() = new_dvar().
% new_fd_var() = new_fd_var().
% notin(VarOrVars,D) => notin(VarOrVars,D).
% nvalue(N,L) => nvalue(N,L).
% regular(L, Q, S, M, Q0, Fs) => regular(L, Q, S, M, Q0, Fs).
% scalar_product(A, X, Product) => scalar_product(A, X, Product).
% serialized(Starts,Durations) => serialized(Starts,Durations).
% solve(Options,Vars) => solve(Options,Vars)
% solve(Vars) => solve(Vars).
% solve_all(Options,Vars) = solve_all(Options,Vars).
% solve_all(Vars) = solve_all(Vars).
% subcircuit(FDVars) => subcircuit(FDVars).
% table_in(Vars, Tuples) => table_in(Vars, Tuples).
% table_notin(Vars, Tuples) => table_notin(Vars, Tuples).

'::'(Vars,Domain) =>
    bp.'_$_picat_in'(sat,Vars,Domain).

% '#='(X,Y) => X #= Y.
'#='(X,Y) => bp.'$='(X,Y).

% '#>='(X,Y) =>  X #>= Y.
'#>='(X,Y) => bp.'$>='(X,Y).

% '#>'(X,Y) =>  X #> Y.
'#>'(X,Y) => bp.'$>'(X,Y).

% '#<'(X,Y) =>  X #< Y.
'#<'(X,Y) => bp.'$<'(X,Y).

% '#=<'(X,Y) =>  X #=< Y.
'#=<'(X,Y) => bp.'$=<'(X,Y).

% '#!='(X,Y) =>  X #!= Y.
'#!='(X,Y) => bp.'$\\='(X,Y).

'#\\='(X,Y) => bp.'$\\='(X,Y).

% '#<=>'(X,Y) =>  X #<=> Y.
'#<=>'(X,Y) => bp.'$<=>'(X,Y).

% '#=>'(X,Y) =>  X #=> Y.
'#=>'(X,Y) => 
   bp.'$=>'(X,Y).

% '#/\\'(X,Y) =>  X #/\ Y.
'#/\\'(X,Y) => bp.'$/\\'(X,Y).

% '#\\/'(X,Y) =>  X #\/ Y.
'#\\/'(X,Y) => bp.'$\\/'(X,Y).

% '#^'(X,Y) =>  X #^ Y.
'#^'(X,Y) => bp.'$\\'(X,Y).

% '#~'(X) =>  #~ X.
'#~'(X) => bp.'$\\'(X).

% all_different(FDVars) => all_different(FDVars).
all_different(FDVars) =>
    (array(FDVars) -> to_list(FDVars)=List; List=FDVars),
    bp.'$alldifferent'(List).

% all_distinct(FDVars) => all_distinct(FDVars).
all_distinct(FDVars) =>
    all_different(FDVars).

%
% Requires that all non-zero values in Xs be distinct.
%
alldifferent_except_0(Xs) =>
    all_different_except_0(Xs).

all_different_except_0(Xs) =>
    foreach(I in 1..Xs.length, J in 1..I-1)
        Xs[I] #= 0 #\/ Xs[J] #= 0 #\/ Xs[I] #!= Xs[J]
    end.

% element(I,FDVars,V) => element(I,FDVars,V).
element(I,FDVars,V) =>
    (array(FDVars) -> to_list(FDVars)=List; List=FDVars),
    (bp.dvar_or_int_list(List) -> true; handle_exception($dvar_or_int_list_expected(List),element)),
    bp.'$element'(I,List,V,sat).

% fd_disjoint(DVar1,DVar2) => fd_disjoint(DVar1,DVar2).
fd_disjoint(DVar1,DVar2),dvar_or_int(DVar1),dvar_or_int(DVar2) => bp.b_DM_DISJOINT_cc(DVar1,DVar2).
fd_disjoint(DVar1,DVar2) =>
    Source=fd_disjoint,
    (dvar_or_int(DVar1) -> handle_exception($dvar_expected(DVar2),Source);handle_exception($dvar_expected(DVar1),Source)).

% count(V,FDVars,Rel,N) => count(V,FDVars,Rel,N).
count(V,FDVars,Rel,N) =>
    (array(FDVars) -> to_list(FDVars)=List; List=FDVars),
    reified_bool_vars(List,V,Bs),
    count_aux(Bs,Rel,N).

reified_bool_vars([],_V,Bs) => Bs=[].
reified_bool_vars([E|List],V,Bs) =>
    Bs = [B|BsR],
    B #<=> (V #= E),
    reified_bool_vars(List,V,BsR).

count_aux(Bs,'#=',N) => sum(Bs) #= N.
count_aux(Bs,'#!=',N) => sum(Bs) #!= N.
count_aux(Bs,'#\\=',N) => sum(Bs) #!= N.
count_aux(Bs,'#>',N) => sum(Bs) #> N.
count_aux(Bs,'#>=',N) => sum(Bs) #>= N.
count_aux(Bs,'#<',N) => sum(Bs) #< N.
count_aux(Bs,'#=<',N) => sum(Bs) #=< N.
count_aux(Bs,'#<=',N) => sum(Bs) #=< N.

count(V,FDVars,N) =>
    count(V,FDVars,'#=',N).

% cumulative(Starts,Durations,Resources,Limit) => cumulative(Starts,Durations,Resources,Limit).
cumulative(Starts,Durations,Resources,Limit) =>
    (array(Starts) -> to_list(Starts)=SList; SList=Starts),    
    (array(Durations) -> to_list(Durations)=DList; DList=Durations),    
    (array(Resources) -> to_list(Resources)=RList; RList=Resources),
    bp.bp_cumulative(SList,DList,RList,Limit,sat).
    
% diffn(RectangleList) => diffn(RectangleList).
diffn(RectangleList) =>
    (array(RectangleList) -> to_list(RectangleList)=RList; RList=RectangleList),
    bp.bp_diffn(RList,sat).

% disjunctive_tasks(Tasks) => disjunctive_tasks(Tasks).
disjunctive_tasks(Tasks) =>
    (array(Tasks) -> to_list(Tasks)=TList; TList=Tasks),    
    disjunctive_tasks_aux(TList).

disjunctive_tasks_aux([]) => true.
disjunctive_tasks_aux([disj_tasks(S1,D1,S2,D2)|Tasks]) =>
    S1+D1 #=< S2 #\/ S2+D2 #=< S1,
    disjunctive_tasks_aux(Tasks).
disjunctive_tasks_aux(Tasks) =>
    handle_exception($invalid_tasks(Tasks),disjunctive_tasks).

% assignment(FDVars1,FDVars2) => assignment(FDVars1,FDVars2).
assignment(FDVars1,FDVars2) =>
    bp.picat_preprocess_assignment(FDVars1,FDVars2,Vect1,Vect2,N),
    all_different(FDVars1),
    all_different(FDVars2),
    foreach(I in 1..N, J in 1..N)
        (Vect1[I] #= J) #<=> (Vect2[J] #= I)
    end.

% solve(Vars) => solve(Vars).
solve(Vars) => solve([],Vars).

% solve(Options,Vars) => solve(Options,Vars)
solve(Options,Vars) =>
    (bp.dvar_or_int_list(Vars) ->
        VList = Vars
    ;
        VList = vars(Vars),
        (bp.dvar_or_int_list(VList) ->
            true
        ;
            handle_exception($free_var_not_allowed(Vars),solve)
        )
    ),
    (select($report(Call),Options,Options1) ->
        Options2 = [$report('$dyna_eval_pred'(['$picat_top_level'],Call))|Options1]
    ;
        Options2 = Options
    ),
    (select($dump(File),Options2,Options3) ->
        AtomFile = to_atom(File),
        Options4 = [$dump(AtomFile)|Options3]
    ;         
        Options4 = Options2
    ),        
    bp.sat_solve(Options4,VList).    

solve_all(Vars) = solve_all([],Vars).

solve_all(Options,Vars) =
    findall(Vars,solve(Options,Vars)).

%%%%%%%%%%%%%%%%%%%%%%%% common to cp and sat modules %%%%%%%%%%%%%%%%%%%%%%
% new_fd_var() = new_fd_var().
new_fd_var() = FDVar =>
    bp.fd_new_var(FDVar).

new_dvar() = FDVar =>
    bp.fd_new_var(FDVar).

%%
table_in(Vars,Tuples) =>
    bp.'$table_in'(Vars,Tuples).

%%
notin(Vars,Domain) =>
    bp.'_$_picat_notin'(sat,Vars,Domain).

%%
table_notin(Vars,Tuples) =>
    bp.'$table_notin'(Vars,Tuples).

% fd_dom(FDVar) = fd_dom(FDVar).
fd_dom(FDVar) = List,integer(FDVar) => List=[FDVar].
fd_dom(FDVar) = List, dvar(FDVar) => bp.domain_min_max(FDVar,Min,Max),bp.fd_domain(FDVar,List,Min,Max).
fd_dom(FDVar) = _List => 
    handle_exception($dvar_expected(FDVar),fd_dom).

% fd_false(FDVar,Elm) => fd_false(FDVar,Elm).
fd_false(FDVar,Elm),
    dvar_or_int(FDVar),
    integer(Elm)
=>
    bp.b_DM_FALSE_cc(FDVar,Elm).
fd_false(FDVar,Elm) =>
    bp.expect_dvar_int(FDVar,Elm,fd_false).

% fd_max(FDVar) = fd_max(FDVar).
fd_max(FDVar) = Max => (dvar_or_int(FDVar)->bp.domain_min_max(FDVar,_,Max);handle_exception($dvar_expected(FDVar),fd_max)).

% fd_min(FDVar) = fd_min(FDVar).
fd_min(FDVar) = Min => (dvar_or_int(FDVar)->bp.domain_min_max(FDVar,Min,_);handle_exception($dvar_expected(FDVar),fd_min)).

% fd_min_max(FDVar,Min,Max) => fd_min_max(FDVar,Min,Max).
fd_min_max(FDVar,Min,Max) => 
    (dvar_or_int(FDVar)->
    bp.domain_min_max(FDVar,Min,Max)
    ;
        handle_exception($dvar_expected(FDVar),fd_min_max)
    ).

% fd_next(FDVar,Elm) = fd_next(FDVar,Elm).
fd_next(FDVar,Elm) = NextElm, 
    dvar(FDVar), integer(Elm) 
=>
    (bp.domain_next_inst(FDVar,Elm,NextElm) -> true; handle_exception(failed,fd_next)).
fd_next(FDVar,Elm) = _NextElm =>
    bp.expect_dvar_int(FDVar,Elm,fd_next).

% fd_prev(FDVar,Elm) = fd_prev(FDVar,Elm).
fd_prev(FDVar,Elm) = PrevElm,
    dvar(FDVar), integer(Elm) 
=>
    (bp.b_DM_PREV_ccf(FDVar,Elm,PrevElm) -> true; handle_exception(failed,fd_prev)).
fd_prev(FDVar,Elm) = _PrevElm =>
    bp.expect_dvar_int(FDVar,Elm,fd_prev).

% fd_size(FDVar) = fd_size(FDVar).
fd_size(FDVar) = Size =>
    (dvar(FDVar) -> 
        bp.b_DM_COUNT_cf(FDVar,Size)
    ;integer(FDVar) ->
        Size=1
    ;
        handle_exception($dvar_expected(FDVar),fd_size)
    ).
    
% fd_true(FDVar,Elm) => fd_true(FDVar,Elm).
fd_true(FDVar,Elm),
    dvar_or_int(FDVar),
    integer(Elm)
=>
    bp.b_DM_TRUE_cc(FDVar,Elm).
fd_true(FDVar,Elm) =>
    bp.expect_dvar_int(FDVar,Elm,fd_true).

fd_vector_min_max(Min,Max) =>
    bp.fd_vector_min_max(Min,Max).

/************************************************************************* 
circuit(L): L is a list of variables X1,X2,...,Xn. An assignment
{X1->a1,X2->a2,...,Xn->an} satisfies this constraint if it forms a Hamilton cycle. 
To be more specific, each variable has a different value and no sub-cycles can be 
formed.  For example, for the constraint circult([X1,X2,X3,X4]), 
[3,4,2,1] is a solution, but [2,1,4,3] is not because it contains sub-cycles.
*************************************************************************/
circuit(L),list(L) =>
    A = to_array(L),
    circuit_aux(A).
circuit(A),array(A) =>
    circuit_aux(A).
circuit(L) =>
    handle_exception($array_or_list_expected(L),circuit).

circuit_aux({V}) => V = 1.
circuit_aux(A) =>                            % reachability encoding
    N = length(A),
    A :: 1..N,
    foreach (I in 1..N)                      % not reflexive
        bp.domain_set_false(A[I],I)
    end,
    H = new_array(N,N),                      % H[I,J] = 1 iff (I,J) an edge in the Hamilton cycle, N1 is a dummy vertex
    init_adj_matrix_circuit(H,A,N),
    H :: 0..1,
    foreach (I in 1..N, J in 1..N, I !== J)  % channel
        if H[I,J] !== 0 then
            H[I,J] #<=> (A[I] #= J)
        end
    end,
    foreach (I in 1..N)                       % all_different(A)
        sum([H[J,I] : J in 1..N]) #= 1,       % each vertex has exactly one incoming edge
        sum([H[I,J] : J in 1..N]) #= 1        % each vertex has exactly one outgoing edge
    end,
    % prevent sub-cycles
    OrderM = new_array(N,N),                  % order the nodes, starting at 1, then A[1], ...
    foreach(I in 1..N) OrderM[I,I] = 0 end,   % not reflexive
    foreach (I in 2..N)
        OrderM[1,I] = 1,
        OrderM[I,1] = 0
    end,
    OrderM :: 0..1,
    foreach (I in 2..N, J in 2..N, I !== J)
        H[1,I] #=> OrderM[I,J],
        H[I,1] #=> OrderM[J,I],
        H[I,J] #=> OrderM[I,J],
        OrderM[I,J]+OrderM[J,I] #= 1
    end,
    foreach (K in 2..N, I in 1..N, H[I,K] !== 0, J in 2..N, K !== J)  % transitive
        H[I,K] #/\ OrderM[K,J] #=> OrderM[I,J]
    end.

% H is the adjacent matrix representation of a Hamilton cycle of graph A
% initialize H[I,J] = 0 if (I,J) cannot occur in H
% Vertex N1 (N+1) has all the incoming arcs of vertex 1
init_adj_matrix_circuit(H,A,N) =>
    foreach (I in 1..N, J in 1..N)                   % H is a subgraph of A
        if fd_true(A[I],J) then
            true
        else
            H[I,J] = 0
        end
    end.
/*
%% use a 0/1 ordering matrix
circuit_aux(A) =>
    N=length(A),
    A :: 1..N,
    M = new_array(N,N),
    foreach(I in 1..N) M[I,I] = 0 end,          % not reflexive
    M :: 0..1,
    foreach(I in 1..N, J in 1..N, I !== J)      % channel
        M[I,J] #<=> (A[I] #= J)
    end,
    foreach (J in 1..N)                         % all_different(A)
        sum([M[I,J] : I in 1..N]) #= 1
    end,
    %
    OrderM = new_array(N,N),                    % order the nodes, starting at 1, then A[1], ...
    foreach(I in 1..N) OrderM[I,I] = 0 end,     % not reflexive
    foreach (I in 2..N)
        OrderM[1,I] = 1,
        OrderM[I,1] = 0
    end,
    OrderM :: 0..1,
    foreach (I in 2..N, J in 2..N, I !== J)
        M[1,I] #=> OrderM[I,J],
        M[I,1] #=> OrderM[J,I],
        M[I,J] #=> OrderM[I,J],
        OrderM[I,J]+OrderM[J,I] #= 1,
        foreach (K in 2..N, K !== I, K !== J)   % transitive
            OrderM[I,K] #/\ OrderM[K,J] #=> OrderM[I,J]
        end
    end.
*/
/* %% this is based on MiniZinc's decomposer, not efficient for SAT
circuit_aux(A) =>
    N=length(A),
    A :: 1..N,
    all_different(A),
    foreach(I in 1..N) A[I] #!= I end,          % not reflexive
    %
    OrderArr = new_array(N),                    % order the nodes, starting at 1, then A[1], ...
    OrderArr :: 1..N,
    OrderArr[1] = 1,                            % a circuit is a path that starts at 1 and ends at 1
    all_different(OrderArr),
    %
    foreach(J in 2..N)                
        A[1] #= J #<=> OrderArr[J] #= 2         % J is visited second
    end,
    %
    foreach(I in 2..N)                             
        A[I] #= 1 #<=> OrderArr[I] #= N         % I is visited last
    end,
    %
    foreach(I in 2..N, J in 2..N, I !== J)
        A[I] #= J #<=> OrderArr[J] #= OrderArr[I]+1
    end.
*/

/************************************************************************* 
subcircuit(L):  L is a list or an array of variables X1,X2,...,Xn.
L forms a subcircuit where Xi = j (j \= i) means that j is the successor of i 
and Xi = i means that i is not in the circuit. No sub-cycles are allowed.
*************************************************************************/
subcircuit(L),list(L) =>
    subcircuit_aux(L.to_array()).
subcircuit(A),array(A) =>
    subcircuit_aux(A).
subcircuit(L) =>
    handle_exception($array_or_list_expected(L),subcircuit).

subcircuit_aux(A) =>
    A.length = N,
    A :: 1..N,
    H = new_array(N,N),                         % H[I,I] = 1 means node I is not in the circuit
    init_adj_matrix_circuit(H,A,N),
    H :: 0..1,
    foreach (I in 1..N, J in 1..N)              % channel
        if H[I,J] !== 0 then
            H[I,J] #<=> (A[I] #= J)
        end
    end,
    foreach (J in 1..N)                         % all_different(A)
        sum([H[I,J] : I in 1..N]) #= 1,
        sum([H[J,I] : I in 1..N]) #= 1        
    end,
    %
    FirstIn = new_array(N),                     
    FirstIn :: 0..1,
    sum(FirstIn) #=< 1,                         % no node is first if the circuit is empty
    %
    OrderM = new_array(N,N),                    % order the nodes in the circuit, starting at I for which FirstIn[I]=1
    foreach(I in 1..N) OrderM[I,I] = 0 end,     % not reflexive
    OrderM :: 0..1,
    foreach (I in 1..N)
        FirstIn[I] #=> #~ H[I,I],
        FirstIn[I] #=> sum([OrderM[J,I] : J in 1..N, J !== I]) #= 0,
        foreach (J in 1..N, I !== J)
            H[I,J] #/\ #~ FirstIn[J] #=> OrderM[I,J],
            OrderM[I,J]+OrderM[J,I] #=< 1       % both could be 0
        end
    end,
    foreach (I in 1..N, K in 1..N, H[I,K] !== 0, J in 1..N, I !== J)
        #~FirstIn[K] #/\ #~FirstIn[J] #/\ H[I,K] #/\ OrderM[K,J] #=> OrderM[I,J]
    end.

/*
% this is based on MiniZinc's decomposer, not efficient for SAT
subcircuit_aux(L,A) =>
    A.length = N,
    L :: 1..N,
    OrderL = new_list(N), OrderA = OrderL.to_array(),
    OrderL :: 1..N,
    FirstInL = new_list(N), FirstInA = FirstInL.to_array(),
    FirstInL :: 0..1,
    sum(FirstInL) #=< 1,  % only one can be the first, no one if the circuit is empty
    Card :: 0..N,
    all_different(L),
    all_different(OrderL),
    Card #= sum([B : I in 1..N, B #<=> (A[I] #!= I)]),  % size of the circuit
    (Card #> 0) #<=> (sum(FirstInL) #= 1),  
    foreach(I in 1..N)
        FirstInA[I] #=> (A[I] #!= I) #/\ (OrderA[I] #= 1),
        A[I] #= I #=> OrderA[I] #> Card,
        foreach(J in 1..N, J !== I)
            A[I] #= J #=> (OrderA[I] #= Card #=> OrderA[J] #= 1) #/\
                          (OrderA[I] #!= Card #=> OrderA[J] #= OrderA[I]+1)
        end
    end.                         
*/


global_cardinality(List,Pairs) =>
    (bp.check_pairs(Pairs) -> true; handle_exception($pairs_expected(Pairs),global_cardinality)),
    N = len(List),
    Cards = [Card : $(_-Card) in Pairs],
    (bp.dvar_or_int_list(Cards) ->
        LB = sum([fd_min(Card) : Card in Cards]),
        SumCards :: LB..N,
        SumCards #= sum(Cards),
        Keys = [Key : $(Key-_) in Pairs],        
        (LB == N, ground(Keys) ->
            List :: Keys
        ;
            true
        )
    ;
        true
    ),
    foreach($(Key-Card) in Pairs) 
         sum([B : E in List, B #<=> (E#=Key)]) #= Card
    end.

% neqs(Neqs) => neqs(Neqs).
neqs(Neqs) =>
    (array(Neqs) -> to_list(Neqs)=List; List=Neqs),    
    check_neqs_args(List,List1),
    foreach ('#\\='(X,Y) in List1)
        X #!= Y
    end.

% serialized(Starts,Durations) => serialized(Starts,Durations).
serialized(Starts,Durations) =>
    Len = Starts.length,
    Os = [1 : _ in 1..Len],
    cumulative(Starts,Durations,Os,1).

/************************************************************************* 
    regular(L,Q,S,M,Q0,Fs)

  L : A sentence (an IntVar array or list)
  Q : number of states
  S : input_max, inputs are from 1 to S
  M : transition matrix:  M[I,J] (I in 1..S, J in 1..Q) is a list of outgoing states for NFA (0 means an error).
  Q0: initial state
  Fs : accepting states
***************************************************************************/
regular(L, Q, S, M, Q0, Fs) =>
    regular_constr(L, Q, S, M, Q0, Fs, sat).
%%
%% lex_le(L1,L2): collection L1 is lexicographically less than or equal to L2
%%
lex_le(L1,L2),list(L1),list(L2) =>
    check_args_lex(L1,L2,L11,L22),
    lex_le_aux(L11,L22).
lex_le(L1,L2),array(L1),array(L2) =>
    check_args_lex(to_list(L1),to_list(L2),L11,L22),
    lex_le_aux(L11,L22).
lex_le(L1,L2) =>
    throw($invalid(lex_le(L1,L2))).

%%
%% lex_lt(L1,L2): collection L1 is lexicographically less than L2
%%
lex_lt(L1,L2),list(L1),list(L2) =>
    check_args_lex(L1,L2,L11,L22),
    lex_lt_aux(L11,L22).
lex_lt(L1,L2),array(L1),array(L2) =>
    check_args_lex(to_list(L1),to_list(L2),L11,L22),
    lex_lt_aux(L11,L22).
lex_lt(L1,L2) =>
    throw($invalid(lex_lt(L1,L2))).

check_args_lex(L1,L2,L11,L22) =>
    (bp.dvar_or_int_list(L1) -> true; handle_exception($dvar_list_expected(L1),lex)),
    (bp.dvar_or_int_list(L2) -> true; handle_exception($dvar_list_expected(L2),lex)),
    N1 = length(L1),
    N2 = length(L2),
    (N1==N2 ->
        L11 = L1, L22 = L2
    ;N1<N2 ->
        Min = min([fd_min(V) : V in L2]),
        Min1 = Min-1,
        L1Pad = [Min1 : _ in 1..N2-N1],
        L11 = L1++L1Pad, L22=L2
    ;
        Min = min([fd_min(V) : V in L1]),
        Min1 = Min-1,
        L2Pad = [Min1 : _ in 1..N1-N2],
        L11 = L1, L22 = L2++L2Pad
    ).

lex_le_aux([],_) => true.
lex_le_aux([X],[Y|_]) => X #=< Y.
lex_le_aux([X1,X2],[Y1,Y2|_]) => (X1 #< Y1) #\/ (X1 #= Y1 #/\ (X2 #=< Y2)).
lex_le_aux(L1,L2) =>
    N1 = length(L1),
    N2 = length(L2),
    (N1 > N2 ->
        L11 = new_list(N2),
        once(append(L11,_,L1)),
        lex_lt_aux(L11,L2)
    ;        
        N = N1,
        A1 = to_array(L1),
        A2 = to_array(L2),
        ReifLexLE = new_array(N),
        ReifLexLE :: 0..1,
        ReifLexLE[N] #<=> (A1[N] #=< A2[N]),
        foreach(I in 2..N-1)
            ReifLexLE[I] #<=> (A1[I] #< A2[I] #\/ ((A1[I] #= A2[I]) #/\ ReifLexLE[I+1]))
            end,
        A1[1] #< A2[1] #\/ ((A1[1] #= A2[1]) #/\ ReifLexLE[2])
    ).

lex_lt_aux([],_) => true.
lex_lt_aux([X],[Y]) => X #< Y.
lex_lt_aux([X],[Y|_]) => X #=< Y.
lex_lt_aux([X1,X2],[Y1,Y2]) => (X1 #< Y1) #\/ (X1 #= Y1 #/\ (X2 #< Y2)).
lex_lt_aux([X1,X2],[Y1,Y2|_]) => (X1 #< Y1) #\/ (X1 #= Y1 #/\ (X2 #=< Y2)).
lex_lt_aux(L1,L2) =>
    N1 = length(L1),
    N2 = length(L2),
    (N1 >= N2 ->
        N = N2,
        A1 = to_array(L1),
        A2 = to_array(L2),
        ReifLexLE = new_array(N),
        ReifLexLE :: 0..1,
        ReifLexLE[N] #<=> (A1[N] #< A2[N]),
        foreach(I in 2..N-1)
            ReifLexLE[I] #<=> (A1[I] #< A2[I] #\/ ((A1[I] #= A2[I]) #/\ ReifLexLE[I+1]))
        end,
        A1[1] #< A2[1] #\/ ((A1[1] #= A2[1]) #/\ ReifLexLE[2])
    ;
        L22 = new_list(N1),
        once(append(L22,_,L2)),
        lex_le_aux(L1,L22)
    ).

%%
nvalue(N,L) => bp.'$nvalue'(N,L).

%% The following constraints are proposed and implemented by Hakan Kjellerstrand
matrix_element(M,I,J,MIJ) =>
    check_matrix(M,NRows,NCols),
    matrix_element(M,NRows,NCols,I,J,MIJ,sat).

%
% Scalar product of the list A and X
%
scalar_product(A, X, Product) => 
    scalar_product(A, X, '#=', Product).

%
% scalar product of List A and X, with one of the relations: 
% 
%   #=, #<, #>, #<=, #>=, #!=
%
scalar_product(A, X, '#=', Product) => 
   check_scalars(A,X),
   sum([A[I]*X[I] : I in 1..A.length]) #= Product.

scalar_product(A, X, '#!=', Product) => 
   check_scalars(A,X),
   sum([A[I]*X[I] : I in 1..A.length]) #!= Product.

scalar_product(A, X, '#>=', Product) => 
   check_scalars(A,X),
   sum([A[I]*X[I] : I in 1..A.length]) #>= Product.

scalar_product(A, X, '#>', Product) => 
   check_scalars(A,X),
   sum([A[I]*X[I] : I in 1..A.length]) #> Product.

scalar_product(A, X, '#<=', Product) => 
   check_scalars(A,X),
    scalar_product(A, X, '#=<', Product).

scalar_product(A, X, '#=<', Product) => 
   check_scalars(A,X),
   sum([A[I]*X[I] : I in 1..A.length]) #=< Product.

scalar_product(A, X, '#<', Product) => 
   check_scalars(A,X),
   sum([A[I]*X[I] : I in 1..A.length]) #< Product.

%
% exactly(?N,?X,?V)
%
% Requires that exactly N variables in X takes the value V.
%
exactly(N, X, V) =>
  count(V,X,#=,N).

%
% at_most(?N,?X,?V)
%
% Requires that atmost N variables in X takes the value V.
%
at_most(N,X,V) => 
  count(V,X,#=<,N).

%
% at_least(?N,?X,?V)
%
% Requires that atleast N variables in X takes the value V.
%
at_least(N,X,V) => 
  count(V,X,#>=,N).

%
% Ensure that List is increasing
%
increasing(FDVars),array(FDVars) =>
   foreach(I in 2..length(FDVars)) FDVars[I-1] #=< FDVars[I] end.
increasing(FDVars),list(FDVars) =>
   increasing_list(FDVars).
increasing(FDVars) =>
   handle_exception($list_or_array_expected(FDVars),increasing).

increasing_list([]) => true.
increasing_list([_]) => true.
increasing_list([X|T@[Y|_]]) => 
    X #=< Y,
    increasing_list(T).

increasing_strict(FDVars),array(FDVars) =>
   foreach(I in 2..length(FDVars)) FDVars[I-1] #< FDVars[I] end.
increasing_strict(FDVars),list(FDVars) =>
   increasing_strict_list(FDVars).
increasing_strict(FDVars) =>
   handle_exception($list_or_array_expected(FDVars),increasing_strict).

increasing_strict_list([]) => true.
increasing_strict_list([_]) => true.
increasing_strict_list([X|T@[Y|_]]) => 
    X #< Y,
    increasing_strict_list(T).

%
% Ensure that FDVars is decreasing
%
decreasing(FDVars),array(FDVars) =>
   foreach(I in 2..length(FDVars)) FDVars[I-1] #>= FDVars[I] end.
decreasing(FDVars),list(FDVars) =>
   decreasing_list(FDVars).
decreasing(FDVars) =>
   handle_exception($list_or_array_expected(FDVars),decreasing).

decreasing_list([]) => true.
decreasing_list([_]) => true.
decreasing_list([X|T@[Y|_]]) => 
    X #>= Y,
    decreasing_list(T).

decreasing_strict(FDVars),array(FDVars) =>
   foreach(I in 2..length(FDVars)) FDVars[I-1] #> FDVars[I] end.
decreasing_strict(FDVars),list(FDVars) =>
   decreasing_strict_list(FDVars).
decreasing_strict(FDVars) =>
   handle_exception($list_or_array_expected(FDVars),decreasing_strict).

decreasing_strict_list([]) => true.
decreasing_strict_list([_]) => true.
decreasing_strict_list([X|T@[Y|_]]) => 
    X #> Y,
    decreasing_strict_list(T).
