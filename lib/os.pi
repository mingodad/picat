module os.

% cd(Path) => cd(Path).
% chdir(Path) => chdir(Path).
% cp(SrcPath,DestPath) => cp(SrcPath,DestPath).
% cwd() = cwd().
% dir => dir.
% directory(Path) => directory(Path).
% env_exists(Name) => env_exists(Name).
% executable(Path) => executable(Path).
% exists(Path) => exists(Path).
% file(Path) => file(Path).
% file_base_name(Path) = file_base_name(Path).
% file_directory_name(Path) = file_directory_name(Path).
% file_exists(Path) => file_exists(Path).
% getenv(Name) = getenv(Name).
% listdir(Path) = listdir(Path).
% ls => ls.
% mkdir(Path) => mkdir(Path).
% pwd() = pwd().
% readable(Path) => readable(Path).
% rename(OldPath,NewPath) => rename(OldPath,NewPath).
% rm(Path) => rm(Path).
% rmdir(Path) => rmdir(Path).
% separator() = separator().
% size(Path) = size(Path).
% writable(Path) => writable(Path).


% chdir(Path) => chdir(Path).
chdir(String) => cd(String).

check_path(Path),atom(Path) => true.
check_path(Path) => string(Path).

% cd(Path) => cd(Path).
cd(Path), check_path(Path) =>
    bp.c_chdir(Path).    
cd(String) =>
    handle_exception($string_expected(String),cd).

% cp(Path1,Path2) => cp(Path1,Path2).
cp(Atom1,Atom2),
    atom(Atom1),
    atom(Atom2)
=>
    picat_copy_file(Atom1.to_string(),Atom2.to_string()).
cp(String1,String2),
    string(String1),
    string(String2)
=>
    picat_copy_file(String1,String2).
cp(String1,String2) =>
    Source = cp,
    (string(String1) ->
        handle_exception($string_expected(String2),Source)
    ;
        handle_exception($string_expected(String1),Source)
    ).

picat_copy_file(Path1,_Path2),directory(Path1) =>
    handle_exception($file_expected(Path1),cp).    
picat_copy_file(Path1,Path2),directory(Path2) =>
    ((append(PrePath2,"/",Path2);append(PrePath2,"\\",Path2)) -> true; PrePath2 = Path2),  % trim trailing "/" or "\\"
    ((member(Separator,['/','\\']),append(_,[Separator|MainFile1],Path1), not member('\\',MainFile1), not member('/',MainFile1)) ->
        true
    ;
        MainFile1=Path1
    ),
    picat_copy_file_aux(Path1,PrePath2++[separator()]++MainFile1).
picat_copy_file(Path1,Path2) =>
    picat_copy_file_aux(Path1,Path2).

picat_copy_file_aux(Path,Path) => true. % can't copy onto itself
picat_copy_file_aux(Path1,Path2) =>
    FDr = open(Path1),
    FDw = open(Path2,write),
    bp.picat_get_out_fdindex(FDw,OutIndex),
    bp.picat_get_in_fdindex(FDr,InIndex),
    bp.c_CP_FILE_cc(InIndex,OutIndex),
    FDr.close(),
    FDw.close().

% cwd() = cwd().
cwd() = Path =>
    bp.c_PICAT_GET_CWD_f(Path).

% dir => dir.
dir =>
    bp.c_OS_TYPE_f(OS),
    (OS == windows -> bp.dir; bp.ls).

% directory(Path) => directory(Path).
directory(Path),check_path(Path) =>
    exists(Path),
    bp.c_file_type(Path,Type),
    Type==directory.
directory(String) =>
    handle_exception($string_expected(String),directory).

% file(Path) => file(Path).
file(Path),check_path(Path) =>
    exists(Path),
    bp.c_file_type(Path,Type),
    Type==regular.
file(String) =>
    handle_exception($string_expected(String),file).

% file_base_name(Path) = file_base_name(Path).
file_base_name(Atom) = Name, atom(Atom) =>
    to_string(Atom) = String,
    file_base_name(String) = Name.
file_base_name(String) = Name, string(String) =>
    ((append(_,['/'|Base],String),not member('/',Base),not member('\\',Base))->
        Name=Base
    ; (append(_,['\\'|Base],String),not member('/',Base),not member('\\',Base))->
        Name=Base
    ;
        Name=String
    ).
file_base_name(String) = _Name =>
    handle_exception($string_expected(String),file_base_name).    
    

% file_directory_name(Path) = file_directory_name(Path).
file_directory_name(Atom) = Name, atom(Atom) =>
    to_string(Atom) = String,
    file_directory_name(String) = Name.
file_directory_name(String) = Name, string(String) =>
    ((append(Pre,['/'|Base],String),not member('/',Base),not member('\\',Base))->
    Name=Pre
    ; (append(Pre,['\\'|Base],String),not member('/',Base),not member('\\',Base))->
        Name=Pre
    ;
        Name="."
    ).
file_directory_name(String) = _Name =>
    handle_exception($string_expected(String),file_directory_name).    

% file_exists(Path) => file_exists(Path).
file_exists(Path),check_path(Path) =>
    bp.b_ACCESS_ccf(Path,0,0).
file_exists(String) =>
    handle_exception($string_expected(String),file_exists).

% env_exists(Name) => env_exists(Name).
env_exists(Path),check_path(Path) =>
    bp.picat_getenv(Path,_).
env_exists(String) =>
    handle_exception($string_expected(String),env_exists).

% getenv(Name) = getenv(Name).
getenv(Path)=Paths,check_path(Path) =>
    (bp.picat_getenv(Path,Paths) -> true; handle_exception($existence_error(Path),getenv)).
getenv(String)=_Paths =>
    handle_exception($string_expected(String),getenv).    

% executable(Path) => executable(Path).
executable(Path), check_path(Path) =>
    exists(Path),
    bp.file_property(Path,$permission(execute)).
executable(String) =>
    handle_exception($string_expected(String),executable).

% exists(Path) => exists(Path).
exists(Path),check_path(Path) =>
    bp.b_ACCESS_ccf(Path,0,0).
exists(String) =>
    handle_exception($string_expected(String),exists).

% listdir(Path) = listdir(Path).
listdir(Path)=List, check_path(Path) => 
    picat_listdir(Path,List).
listdir(String)=_List =>
    handle_exception($string_expected(String),listdir).

picat_listdir(Path,List),directory(Path) =>
    bp.c_directory_files(Path,List).
picat_listdir(Path,_List) =>
    handle_exception($directory_expected(Path),listdir).    

% ls => ls.
ls =>
    dir.

% mkdir(Path) => mkdir(Path).
mkdir(Path), check_path(Path) => 
    bp.make_directory(Path).
mkdir(String) =>
    handle_exception($string_expected(String),mkdir).

% pwd() = pwd().
pwd() = cwd().

% rename(Path1,Path2) => rename(Path1,Path2).
rename(Path1,Path2),
    check_path(Path1),
    check_path(Path2)
=>
    bp.rename_file(Path1,Path2).
rename(String1,String2) =>
    Source = $rename(String1,String2),
    (string(String1) ->
        handle_exception($string_expected(String2),Source)
    ;
        handle_exception($string_expected(String1),Source)
    ).

% readable(Path) => readable(Path).
readable(Path), check_path(Path) =>
    exists(Path),
    bp.file_property(Path,$permission(read)).
readable(String) =>
    handle_exception($string_expected(String),readable).

% rm(Path) => rm(Path).
rm(Path), check_path(Path) =>
    picat_delete_file(Path).
rm(String) =>
    handle_exception($string_expected(String),rm).    
    
picat_delete_file(Name) =>
    (file(Name)->true; handle_exception($file_expected(Name),rm)),
    (bp.delete_file(Name) -> true;  handle_exception($action_failed(Name),rm)).
    
% rmdir(Path) => rmdir(Path).
rmdir(Path) =>
    (check_path(Path) ->
        (exists(Path) ->
            picat_delete_directory(Path)
        ;
            handle_exception($directory_expected(String),rmdir)
        )
    ;
        handle_exception($string_expected(String),rmdir)
    ).

picat_delete_directory(Name) =>
    (bp.delete_directory(Name) -> true; handle_exception($action_failed(Name),rmdir)).

% separator() = separator().
separator() = Char =>
    bp.c_OS_TYPE_f(OS),
    (OS == windows -> Char='\\'; Char='/').

% size(Path) = size(Path). size/1 is defined in basic, so must be module qualified as os.size(File).
size(Path) = Size, check_path(Path) =>
    bp.file_property(Path,$size(Size)).
size(String) = _ =>
    handle_exception($string_expected(String),size).

% writable(Path) => writable(Path).
writable(Path),check_path(Path) =>
    exists(Path),
    bp.file_property(Path,$permission(write)).
writable(String) => 
    handle_exception($string_expected(String),writable).
    
