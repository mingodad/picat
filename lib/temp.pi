import sat.

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
hcp_grid(G) =>
    grid_check_matrix(G,hcp_grid,NRows,NCols),
    Vs = [{(R,C), G[R,C]} : R in 1..NRows, C in 1..NCols],
    Es = [{(R,C),(R1,C1),_} : R in 1..NRows, C in 1..NCols, grid_neibs(G,NRows,NCols,R,C,Neibs), (R1,C1) in Neibs],
    hcp(Vs,Es,_K).

hcp_grid(G,Es) =>
    grid_check_matrix(G,hcp_grid,NRows,NCols),
    Vs = [{(R,C), G[R,C]} : R in 1..NRows, C in 1..NCols],    
    (var(Es) ->
        Es = [{(R,C),(R1,C1),_} : R in 1..NRows, C in 1..NCols, grid_neibs(G,NRows,NCols,R,C,Neibs), (R1,C1) in Neibs]
    ;    
        hcp_grid_check_es(NRows,NCols,Es,hcp_grid)
    ),
    hcp(Vs,Es,_K).

hcp_grid(G,Es,K) =>
    grid_check_matrix(G,hcp_grid,NRows,NCols),
    Vs = [{(R,C), G[R,C]} : R in 1..NRows, C in 1..NCols],
    (var(Es) ->
        Es = [{(R,C),(R1,C1),_} : R in 1..NRows, C in 1..NCols, grid_neibs(G,NRows,NCols,R,C,Neibs), (R1,C1) in Neibs]
    ;    
        hcp_grid_check_es(NRows,NCols,Es,hcp_grid)
    ),
    hcp(Vs,Es,K).

hcp(Vs,Es) =>
    hcp(Vs,Es,_).

hcp(Vs,Es,K) =>
    VNumMap = new_map(),
    hcp_scc_check_vs(Vs,1,N,VNumMap,Bs,0,NZeros,0,MinK,hcp),
    AdjMap = new_map(),
    hcp_check_es(N,Es,VNumMap,AdjMap,hcp),
    hcp_aux(Bs,Es,N,K,VNumMap,AdjMap,NZeros,MinK).

hcp_scc_check_vs([],I,N,_VNumMap,Bs,CountZ0,CountZ,CountOne0,CountOne,_Source) =>
    N = I-1,
    Bs = [],
    CountZ = CountZ0,
    CountOne = CountOne0.
hcp_scc_check_vs([{V,B}|Vs],I,N,VNumMap,Bs,CountZ0,CountZ,CountOne0,CountOne,Source) =>
    hcp_scc_check_vertex(V,Source),
    hcp_scc_check_b(B,Source),
    (VNumMap.has_key(V) ->
        handle_exception($duplicated_vertex_name(V), Source)
    ;
        VNumMap.put(V,I)
    ),
    I1 is I+1,
    hcp_scc_check_vs(Vs,I1,N,VNumMap,Bs,CountZ0,CountZ,CountOne0,CountOne,Source).
hcp_scc_check_vs([VB|_Vs],_I,_N,_VNumMap,_Bs,_CountZ0,_CountZ,_CountOne0,_CountOne,Source) =>
    handle_exception($invalid_pair(VB), Source).
hcp_scc_check_vs(Vs,_I,_N,_VNumMap,_Bs,_CountZ0,_CountZ,_CountOne0,_CountOne,Source) =>
    handle_exception($list_expected(Vs), Source).

hcp_scc_check_vertex(V,_Source), ground(V) => true.
hcp_scc_check_vertex(V,Source) =>
    handle_exception($ground_expected(V), Source).

hcp_scc_check_b(B,_Source), var(B) => bp.domain(B,0,1).
hcp_scc_check_b(0,_Source) => true.
hcp_scc_check_b(1,_Source) => true.
hcp_scc_check_b(B,Source) =>
    handle_exception($dvar_expected(B), Source).

hcp_check_es(N,[],_VNumMap,AdjMap,_Source) =>
    foreach (I in 1..N)
	    Neibs = AdjMap.get(I,[]),
		Neibs1 = sort_remove_dups(Neibs),
		AdjMap.put(I,Neibs1)
	end.
hcp_check_es(N,[{V1,V2,B}|Es],VNumMap,AdjMap,Source) =>
    hcp_scc_check_vertex(V1,Source),
    hcp_scc_check_vertex(V2,Source),
    I1 = VNumMap.get(V1,0),
    (I1 == 0 -> handle_exception($unknown_vertex_name(V1), Source); true),
    I2 = VNumMap.get(V2,0),
    (I2 == 0 -> handle_exception($unknown_vertex_name(V2), Source); true),
    Neibs1 = AdjMap.get(I1,[]),
    AdjMap.put(I1,[I2|Neibs1]),
    hcp_scc_check_b(B,Source),
    hcp_check_es(N,Es,VNumMap,AdjMap,Source).
hcp_check_es(_N,[E|_Es],_VNumMap,_AdjMap,Source) =>
    handle_exception($invalid_triplet(E), Source).
hcp_check_es(_N,Es,_VNumMap,_AdjMap,Source) =>
    handle_exception($list_expected(Es), Source).

hcp_grid_check_es(_NRows,_NCols,[],_Source) => true.
hcp_grid_check_es(NRows,NCols,[{(R1,C1),(R2,C2),_B}|Es],Source) =>
    (R1 >= 1, R1 <= NRows, C1 >= 1, C1 <= NCols ->
        true
    ;
        handle_exception($invalid_grid_coordinate(R1,C1), Source)
    ),
    (R2 >= 1, R2 <= NRows, C2 >= 1, C2 <= NCols ->
        true
    ;
        handle_exception($invalid_grid_coordinate(R2,C2), Source)
    ),
    hcp_grid_check_es(NRows,NCols,Es,Source).
hcp_grid_check_es(_NRows,_NCols,[E|_Es],Source) =>
    handle_exception($invalid_triplet(E), Source).
hcp_grid_check_es(_NRows,_NCols,Es,Source) =>
    handle_exception($list_expected(Es), Source). 

hcp_aux(_Bs,Es,N,K,VNumMap,AdjMap,_NZeros,MinK), MinK == N =>   % all vertices are in, convert this to circuit
    K = N,
    A = new_array(N),
    A :: 1..N,
    foreach (I in 1..N)
        D = AdjMap.get(I),
        A[I] :: D
    end,
    foreach ({V1,V2,B} in Es)
        I1 = VNumMap.get(V1),
        I2 = VNumMap.get(V2),
        A[I1] #= I2 #<=> B
    end,
    circuit(A).
hcp_aux(Bs,Es,N,K,VNumMap,AdjMap,NZeros,MinK) =>
    A = to_array(Bs),
    MaxK = max(N-NZeros,1),
    K :: MinK..MaxK,
    sum(Bs) #= K,
    (MinK > 2 ->
        KGt2 = 1,
        KGt1 = 1
    ;
        KGt2 #<=> (K #> 2),
        KGt1 #<=> (K #> 1),
        KGt2 #=> KGt1
    ),
    H = new_array(N,N),                             % H[I,J] = 1 iff edge (I,J) is in the cycle
    foreach ({V1,V2,B} in Es)
        I1 = VNumMap.get(V1),
        I2 = VNumMap.get(V2),
        H[I1,I2] = B,
        B #=> A[I1],
        B #=> A[I2]
    end,
    foreach (I in 1..N, J in 1..N)
        Cell = H[I,J], 
        if var(Cell) && not dvar(Cell) then
            Cell = 0
        end
    end,
    foreach (I in 1..N)                             % each vertex has exactly one incoming and one outgoing edge
        TmpB #\/ #~A[I] #\/ #~KGt1,                 
        TmpB #=> sum([H[I,J] : J in 1..N]) #= 1,
        TmpB #=> sum([H[J,I] : J in 1..N]) #= 1        
    end,
    % ban sub-cycles
    hcp_scc_choose_start(A,N,KGt1,MinK,Start),      % Start[I] = 1 iff the cycle starts at vertex I
    P = new_array(N),                               % each in-cycle vertex is mapped to a unique position
    P :: 0..MaxK-1,
    foreach (I in 1..N)
        Start[I] #=> P[I] #= 0,
        foreach (J in 1..N, I !== J, H[I,J] !== 0)
            if I < J then
                #~KGt2 #\/ #~H[I,J] #\/ #~H[J,I]   % no cycle of size 2
            end,
            #~Start[J] #/\ H[I,J] #=>  P[J] #= P[I]+1
        end
    end.

%
% Start and HasStarted must follow the following pattern:
%      Start = 0 ... 0 1 0 ... 0
% HasStarted = 0 ... 0 1 1 ... 1
%
hcp_scc_choose_start(A,N,KGt1,MinK,Start) =>
    Start = new_array(N),                   % Start[I] = 1 iff the cycle starts at vertex I
    Start :: 0..1,                          
    foreach (I in 1..N)
        #~A[I]  #=> #~Start[I]              % I is not in the cycle
    end,
    HasStarted = new_array(N),              % HasStarted[I] iff there exists I1 (I1 =< I) such that Start[I1]
    HasStarted :: 0..1,
    (MinK > 1 ->
        HasStarted[N-MinK+1] #= 1
    ;
        KGt1 #=> HasStarted[N]
    ),
    A[1] #=> Start[1],
    HasStarted[1] #<=> Start[1],
    foreach (I in 2..N)
        HasStarted[I-1] #=> HasStarted[I],
        Start[I] #=> #~HasStarted[I-1],
        Start[I] #=> HasStarted[I],
        #~A[I] #\/ HasStarted[I-1] #\/ Start[I],               % (A[I] #/\ #~HasStarted[I-1]) #=> Start[I],
        #~HasStarted[I] #\/ Start[I] #\/ HasStarted[I-1]       % (HasStarted[I] #/\ #~Start[I]) #=> HasStarted[I-1]
    end.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
scc_grid(G) =>
    scc_grid(G,_K).

scc_grid(G,K) =>
    grid_check_matrix(G,scc_grid,NRows,NCols),
    Vs = [{(R,C), G[R,C]} : R in 1..NRows, C in 1..NCols],
    Es = [{(R,C),(R1,C1)} : R in 1..NRows, C in 1..NCols, grid_neibs(G,NRows,NCols,R,C,Neibs), (R1,C1) in Neibs],
    scc(Vs,Es,K).

scc(Vs,Es) =>
    scc(Vs,Es,_).

scc(Vs,Es,K) =>
    VNumMap = new_map(),
    hcp_scc_check_vs(Vs,1,N,VNumMap,Bs,0,NZeros,0,MinK,scc),
    AdjMap = new_map(),
    scc_check_es(N,Es,VNumMap,AdjMap,scc),
    scc_aux(Bs,N,K,AdjMap,NZeros,MinK).

scc_check_es(N,[],_VNumMap,AdjMap,_Source) =>
    foreach (I in 1..N)
	    Neibs = AdjMap.get(I,[]),
		Neibs1 = sort_remove_dups(Neibs),
		AdjMap.put(I,Neibs1)
	end.
scc_check_es(N,[{V1,V2}|Es],VNumMap,AdjMap,Source) =>
    hcp_scc_check_vertex(V1,Source),
    hcp_scc_check_vertex(V2,Source),
    I1 = VNumMap.get(V1,0),
    (I1 == 0 -> handle_exception($unknown_vertex_name(V1), Source); true),
    I2 = VNumMap.get(V2,0),
    (I2 == 0 -> handle_exception($unknown_vertex_name(V2), Source); true),
    Neibs1 = AdjMap.get(I1,[]),
    AdjMap.put(I1,[I2|Neibs1]),
    Neibs2 = AdjMap.get(I2,[]),
    AdjMap.put(I2,[I1|Neibs2]),
    scc_check_es(N,Es,VNumMap,AdjMap,Source).
scc_check_es(_N,[E|_Es],_VNumMap,_AdjMap,Source) =>
    handle_exception($invalid_pair(E), Source).
scc_check_es(_N,Es,_VNumMap,_AdjMap,Source) =>
    handle_exception($list_expected(Es), Source).

scc_aux(Bs,N,K,AdjMap,NZeros,MinK) =>
    A = to_array(Bs),
    MaxK = max(N-NZeros,1),
    K :: MinK..MaxK,
    sum(Bs) #= K,
    (MinK > 1 ->
        KGt1 = 1
    ;
        KGt1 #<=> (K #> 1)
    ),
    hcp_scc_choose_start(A,N,KGt1,MinK,Start),    % Start[I] = 1 iff vertex I is the root of the tree
    DistA = new_array(N),
    MaxDist = MaxK-1,
    DistA :: 0..MaxDist,
    foreach (I in 1..N)
        if A[I] == 0 then
            DistA[I] = 0
        else
            Start[I] #=> DistA[I] #= 0,
            Neibs = AdjMap.get(I,[]),
            NNeibs = len(Neibs),
            Ps = new_list(NNeibs),
            Ps :: 0..1,                                                   % Ps[J] = 1 <=> Neib J is I's parent
            Start[I] #=> sum(Ps) #= 0,
            #~Start[I] #/\ A[I] #=> sum(Ps) #= 1,
            foreach ({P,J} in zip(Ps, Neibs))
                TmpB #\/ #~A[I] #\/ #~P,            
                TmpB #=> A[J],
                TmpB #=> DistA[I] #= DistA[J]+1
            end
        end
    end.

grid_check_matrix(A,Source,NRows,NCols) =>
    (array(A) -> true; handle_exception($array_expected(A),Source)),
    NRows = len(A),
    foreach (R in 1..NRows)
        (array(A[R]) -> true; handle_exception($array_expected(A[R]),Source))
    end,
    NCols = len(A[1]).

grid_neibs(A,NRows,NCols,R,C,Neibs) =>
        Neibs = [(R1,C1) : (R1,C1) in [(R-1,C), (R+1,C), (R,C-1), (R,C+1)],
                            R1 >= 1, R1 =< NRows, C1 >= 1, C1 =< NCols, A[R1,C1] !== 0].


