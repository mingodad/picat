module io.   % imported by default

at_end_of_stream(FD) => at_end_of_stream(FD).
close(FD) => close(FD).
flush() => flush(stdout).
flush(FD) => flush(FD).
nl => nl(stdout).
nl(FD) => nl(FD).
open(Name) = open(Name,read).
open(Name,Mode) = open(Name,Mode).
peek_byte(FD) = peek_byte(FD).
peek_char(FD) = peek_char(FD).
print(FD,Term) => print(FD,Term).
print(Term) => print(stdout,Term).
printf(FD,Format) => printf(FD,Format).
printf(FD,Format,A1) => printf(FD,Format,A1).
printf(FD,Format,A1,A2) => printf(FD,Format,A1,A2).
printf(FD,Format,A1,A2,A3) => printf(FD,Format,A1,A2,A3).
printf(FD,Format,A1,A2,A3,A4) => printf(FD,Format,A1,A2,A3,A4).
printf(FD,Format,A1,A2,A3,A4,A5) => printf(FD,Format,A1,A2,A3,A4,A5).
printf(FD,Format,A1,A2,A3,A4,A5,A6) => printf(FD,Format,A1,A2,A3,A4,A5,A6).
printf(FD,Format,A1,A2,A3,A4,A5,A6,A7) => printf(FD,Format,A1,A2,A3,A4,A5,A6,A7).
printf(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8) => printf(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8).
printf(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8,A9) => printf(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8,A9).
printf(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10) => printf(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10).
printf(Format) => printf(stdout,Format).
println(FD,Term) => println(FD,Term).
println(Term) => println(Term).
read_atom() = read_atom(stdin).
read_atom(FD) = read_atom(FD).
read_byte() = read_byte(stdin).
read_byte(FD) = read_byte(FD).
read_byte(FD,N) = read_byte(FD,N).
read_char() = read_char(stdin).
read_char(FD) = read_char(FD).
read_char(FD,N) = read_char(FD,N).
read_char_code() = read_char_code(stdin).
read_char_code(FD) = read_char_code(FD).
read_char_code(FD,N) = read_char_code(FD,N).
read_file_bytes() = read_file_bytes().   % read from stdin until ^z (Windows) or ^d (Unix)
read_file_bytes(File) = read_file_bytes(File).
read_file_chars() = read_file_chars().   % read from stdin until ^z (Windows) or ^d (Unix)
read_file_chars(File) = read_file_chars(File).
read_file_codes() = read_file_codes().   % read from stdin until ^z (Windows) or ^d (Unix)
read_file_codes(File) = read_file_codes(File).
read_file_lines() = read_file_lines().   % read from stdin until ^z (Windows) or ^d (Unix)
read_file_lines(File) = read_file_lines(File).
read_file_terms() = read_file_terms().   % read from stdin until ^z (Windows) or ^d (Unix)
read_file_terms(File) = read_file_terms(File).
read_int() = read_int(stdin).
read_int(FD) = read_int(FD).
read_line() = read_line(stdin).
read_line(FD) = read_line(FD).
read_number() = read_number(stdin).
read_number(FD) = read_number(FD).
read_picat_token() = read_picat_token(stdin).
read_picat_token(FD) = read_picat_token(FD).
read_picat_token(FD,TokenType,TokenVal) => read_picat_token(FD,TokenType,TokenVal).
read_picat_token(TokenType,TokenVal) => read_picat_token(stdin,TokenType,TokenVal).
read_real() = read_real(stdin).
read_real(FD) = read_real(FD).
read_term() = read_term(stdin).
read_term(FD) = read_term(FD).
readln() = read_line(stdin).
readln(FD) = read_line(FD).
write(FD,Term) => write(FD,Term).
write(Term) => write(stdout,Term).
write_byte(Bytes) => write_byte(stdout,Bytes).
write_byte(FD,Bytes) => write_byte(FD,Bytes).
write_char(Chars) => write_char(stdout,Chars).
write_char(FD,Chars) => write_char(FD,Chars).
write_char_code(Codes) => write_char_code(stdout,Codes).
write_char_code(FD,Codes) => write_char_code(FD,Codes).
writef(FD,Format,A1) => writef(FD,Format,A1).
writef(FD,Format,A1,A2) => writef(FD,Format,A1,A2).
writef(FD,Format,A1,A2,A3) => writef(FD,Format,A1,A2,A3).
writef(FD,Format,A1,A2,A3,A4) => writef(FD,Format,A1,A2,A3,A4).
writef(FD,Format,A1,A2,A3,A4,A5) => writef(FD,Format,A1,A2,A3,A4,A5).
writef(FD,Format,A1,A2,A3,A4,A5,A6) => writef(FD,Format,A1,A2,A3,A4,A5,A6).
writef(FD,Format,A1,A2,A3,A4,A5,A6,A7) => writef(FD,Format,A1,A2,A3,A4,A5,A6,A7).
writef(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8) => writef(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8).
writef(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8,A9) => writef(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8,A9).
writef(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10) => writef(FD,Format,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10).
writef(Format) => writef(Format).
writef(Format,A1) => writef(Format,A1).
writeln(FD,Term) => writeln(FD,Term).
writeln(Term) => writeln(stdout,Term).
