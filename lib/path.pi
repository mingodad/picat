path_d(Vs,Es,Src,Dest), list(Dest) =>
    check_graph_vs(Vs, path_d),
    check_graph_es(Es, path_d),
    hcp_scc_check_vertex(Src,path_d),
    foreach (V in Dest)
        hcp_scc_check_vertex(V,path_d)
    end,
    once member({Src, 1}, Vs),                              % Src is in
    VMap = new_map(),
    DistMap = new_map(),
    foreach ({V,B} in Vs)
        VMap.put(V,B),
        Dist :: 0..N,
        DistMap.put(V, Dist)
    end,
    AMap = new_map(),
    EMap = new_map(),
    foreach ({V1,V2,B} in Es)
        register_d_edge(V1,V2,B,VMap,EMap,AMap)
    end,
    sum([B : V in Dest, B = VMap.get(V,0)]) #= 1,           % exactly one dest vertex is in
    if member(Src, Dest) then                               % Src is in Dest
        foreach ({V,B} in Vs, V != Src)                     % only Src is in the graph
            B = 0
        end,
        foreach ({_,_,B} in Es)
            B = 0
        end
    else                                                    
        Neibs = AMap.get(Src,[]),
        sum([B1 : (_,B1) in Neibs]) #= 1,                   % exactly one outgoing
        DistMap.get(Src) = 0,
        foreach (V in Dest)
            Bv = VMap.get(V),
            BInNeibs = [Buv : {U,_} in Vs, Key = (U,V), EMap.has_key(Key), Buv = EMap.get(Key)],
            Bv #=> sum(BInNeibs) #= 1                       % exactly one incomming
        end,
        foreach ({V,Bv} in Vs, V != Src, not member(V,Dest))
            BInNeibs = [Buv : {U,_} in Vs, Key = (U,V), EMap.has_key(Key), Buv = EMap.get(Key)],
            BOutNeibs = [Bvu : {U,_} in Vs, Key = (V,U), EMap.has_key(Key), Bvu = EMap.get(Key)],    
            Bv #=> sum(BInNeibs) #= 1,
            Bv #=> sum(BOutNeibs) #= 1,
            DistOfV = DistMap.get(V),
            foreach ({U,_} in Vs, Key = (V,U), EMap.has_key(Key), Bvu = EMap.get(Key))
                DistOfU = DistMap.get(U),
                Bvu #=> DistOfU #= DistOfV+1
            end
        end
    end.
path_d(Vs,Es,Src,Dest) =>                                   % unique dest
    hcp_scc_check_vertex(Dest,path_d),
    path_d(Vs,Es,Src,[Dest]).
