/****************************************************************************
   pb.pi (in Picat), by Neng-Fa Zhou, March 28, 2016

   This program interprets PB instances of the format used in the PB competition.

   A constraint has the form:

    [Coe term]+ (>= | = ) Coe ;

   and an objective function has the form:

    min: [Coe term]+ ;

   where 'term' is one or more literals of the form (var | ~var)+.

   A line that begins with '*' is a comment.

   This program can be loaded into the Picat system and run by a query 
   
   Picat> cl("pb")
   Picat> main("nqueens_8")

   Alternatively, this program can be run as a standalone command:

       picat pb nqueens_8

   You need to ensure that the path to the Picat executable is set properly 
   and the file "pb.pi" and "nqueens_8.opb" are in the working directory.
   Otherwise, the full paths to the executable and the files must be given.
*********************************************************************************/
import sat.

main(InFile),string(InFile) =>
    pb(InFile).
main([InFile]),string(InFile) =>
    pb(InFile).
main(Args) =>
    println($invalid_args(Args)).           

pb(InFile) ?=>
    (append(MainFileStr,".opb",InFile) -> 
        OPBFile = InFile
    ; 
        MainFileStr = InFile,
        OPBFile = InFile++".opb"
    ),        
    InStream = open(OPBFile,read),
    read_pb_cl_tokens(InStream,Tokens),
    printf("solving %s\n",InFile),
    VarsMap = new_map(),
    catch(parse(InStream,Tokens,VarsMap,Obj),Exception,(println(Exception),close(InStream),halt)),
    close(InStream),
    List = map_to_list(VarsMap),
    (var(Obj) ->
        solve(List)
    ;
        ObjVar #= Obj,
        solve($[min(ObjVar), $report(printf("o %w\n",ObjVar))],List),
        println("s OPTIMUM FOUND")
    ),
    print('v '),
    output_sol(List,10).
pb(_InFile) =>
    println("s UNSATISFIABLE").

%%
parse(_,end_of_file,_VarsMap,_Obj) => true.
parse(InStream,[min,':'|Tokens],VarsMap,Obj) => 
    parse_exp(Tokens,[],VarsMap,Exp),
    Obj = Exp,
    read_pb_cl_tokens(InStream,NextTokens),
    parse(InStream,NextTokens,VarsMap,Obj).
parse(InStream,Tokens,VarsMap,Obj) => 
    parse_constr(Tokens,VarsMap),
    read_pb_cl_tokens(InStream,NextTokens),
    parse(InStream,NextTokens,VarsMap,Obj).

parse_exp([+,Coe|Tokens],TokensR,VarsMap,Exp) =>
    Exp = $Coe*Term+ExpR,
    parse_term(Tokens,Tokens1,VarsMap,Term),
    parse_exp(Tokens1,TokensR,VarsMap,ExpR).
parse_exp([Coe|Tokens],TokensR,VarsMap,Exp),integer(Coe) =>
    Exp = $Coe*Term+ExpR,
    parse_term(Tokens,Tokens1,VarsMap,Term),
    parse_exp(Tokens1,TokensR,VarsMap,ExpR).
parse_exp([-,Coe|Tokens],TokensR,VarsMap,Exp) =>
    Exp = $-Coe*Term+ExpR,
    parse_term(Tokens,Tokens1,VarsMap,Term),
    parse_exp(Tokens1,TokensR,VarsMap,ExpR).
parse_exp(Tokens,TokensR,_VarsMap,Exp) =>
    TokensR = Tokens,
    Exp = 0.

parse_term(['~',Var|Tokens],TokensR,VarsMap,Term) =>
    IntVar = VarsMap.get(Var,[]),
    (IntVar==[] ->
        PicatVar :: 0..1,
        VarsMap.put(Var,PicatVar)
    ;
        PicatVar = IntVar
    ),
    (not_followed_by_var(Tokens) ->
        Term = $(1-PicatVar), TokensR = Tokens
    ;
        Term = $(1-PicatVar)*TermR,
        parse_term(Tokens,TokensR,VarsMap,TermR)
    ).
parse_term([Var|Tokens],TokensR,VarsMap,Term) =>
    IntVar = VarsMap.get(Var,[]),
    (IntVar==[] ->
        PicatVar :: 0..1,
        VarsMap.put(Var,PicatVar)
    ;
        PicatVar = IntVar
    ),
    (not_followed_by_var(Tokens) ->
        Term = PicatVar, TokensR = Tokens
    ;
        Term = $PicatVar*TermR,
        parse_term(Tokens,TokensR,VarsMap,TermR)
    ).

not_followed_by_var(['='|_]) => true.
not_followed_by_var(['>='|_]) => true.
not_followed_by_var([]) => true.
not_followed_by_var(['+'|_]) => true.
not_followed_by_var(['-'|_]) => true.

% parse_constr(Tokens,VarsMap) ?=> println($parse(Tokens)),nl,fail.

parse_constr(Tokens,VarsMap) =>
    parse_exp(Tokens,Tokens1,VarsMap,Exp),
    Tokens1 = [Op|Tokens2],
    parse_int(Tokens2,_,C),
    (Op == '=' ->
        println(Exp #= C),
        Exp #= C
    ;
        println(Exp #>= C),
        Exp #>= C
    ).

parse_int(['+',I|Tokens],TokensR,C) => C = I, TokensR = Tokens.
parse_int(['-',I|Tokens],TokensR,C) => C = -I, TokensR = Tokens.
parse_int([I|Tokens],TokensR,C) => C = I, TokensR = Tokens.

/* tokenizer */
read_pb_cl_tokens(InStream,Tokens) =>
    skip_comment(InStream),
    read_picat_token(InStream,Type,Token), % first token
    read_pb_cl_tokens(InStream,Type,Token,Tokens).

skip_comment(InStream) =>
    Ch = peek_char(InStream),
    skip_comment(InStream,Ch).

skip_comment(InStream,'*') =>
    _ = read_line(InStream),
    skip_comment(InStream).
skip_comment(InStream,Ch), w_space(Ch) =>
    _ = read_char(InStream),
    NextCh = peek_char(InStream),
    skip_comment(InStream,NextCh).
skip_comment(_InStream,_) => true.

index (+)
w_space(' ').
w_space('\n').
w_space('\t').
w_space('\r').

read_pb_cl_tokens(_InStream,end_of_file,_,Tokens) => Tokens=end_of_file.     % end-of-file
read_pb_cl_tokens(_InStream,punctuation,';',Tokens) => 
    Tokens = [].
read_pb_cl_tokens(InStream,_Type,Token,Tokens) =>                   
    Tokens=[Token|Tokens1],
    read_picat_token(InStream,Type,PicatToken),
    read_pb_cl_tokens(InStream,Type,PicatToken,Tokens1).

%%%
output_sol([],_NumItems) => true.
output_sol(List,0) => 
    nl,
    print('v '),
    output_sol(List,10).
output_sol([V=Val|List],NumItems) =>
    if (Val == 0) then  print('~') end,
    print(V), print(' '),
    output_sol(List,NumItems-1).
