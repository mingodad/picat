main([File]) =>
    FD=open(File),			 
    FD.read_line()=Line,
    separate(FD,Line,Solved,Unsolved),
	printf("COMPILED = %d:\n",Solved.length),
	foreach(P in Solved)
	    printf("%s\n",P)
	end,
	printf("NOT COMPILED=%d:\n",Unsolved.length),	
	foreach(P in Unsolved)
	    printf("%s\n",P)
	end.

separate(_,end_of_file,Solved,Unsolved) => Solved=[],Unsolved=[].
separate(FD,L,Solved,Unsolved),
    append(_,"solving",Name,L),
    append(_,".pi",Name)
=>
    FD.read_line()=Line,    
    solved_or_not(FD,Line,Name,Solved,Unsolved).
separate(FD,_L,Solved,Unsolved) =>
    FD.read_line()=Line,    
    separate(FD,Line,Solved,Unsolved).

solved_or_not(_FD,end_of_file,Name,Solved,Unsolved) =>
    Solved=[], Unsolved=[Name].
solved_or_not(FD,L,Name,Solved,Unsolved),
    append(_,"solving",Str,L),
    append(_,".pi",Str)
=>
    Unsolved=[Name|UnsolvedR],
	separate(FD,L,Solved,UnsolvedR).
solved_or_not(FD,L,Name,Solved,Unsolved),
    append("% start SAT",_,L)
=>
    Solved=[Name|SolvedR],
    FD.read_line()=Line,     
	skip_until_solving(FD,Line,NextLine),
	separate(FD,NextLine,SolvedR,Unsolved).
solved_or_not(FD,_,Name,Solved,Unsolved) =>
    FD.read_line()=Line,     
    solved_or_not(FD,Line,Name,Solved,Unsolved).

skip_until_solving(_FD,end_of_file,NextLine) => NextLine=end_of_file.
skip_until_solving(_FD,L,NextLine),
    append(_,"solving",Str,L),
    append(_,".pi",Str)
 => 
    NextLine=L.
skip_until_solving(FD,_,NextLine) =>
    FD.read_line()=L,
    skip_until_solving(FD,L,NextLine).
