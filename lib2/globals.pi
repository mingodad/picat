import cp.

/*
predicate value_precede_int(int: s, int: t, array[int] of var int: x) =
    let {
        int: imin = min(index_set(x)),
        int: imax = max(index_set(x)),
        array[imin..imax+1] of var bool: b
    } in (
        forall (i in imin..imax) (let {
            var bool: xis = (x[i] == s)
        } in
            (xis -> (b[i+1] == true))
        /\  ((not xis) -> (b[i] == b[i+1]))
        /\  ((not b[i]) -> (x[i] != t))
        )
    /\  b[imin] == false
    );
*/
value_precede(S,T,X), list(X) =>
    value_precede_aux(S,T,to_array(X)).
value_precede(S,T,X), array(X) =>
    value_precede_aux(S,T,X).
value_precede(_S,_T,X) =>
    handle_exception($list_or_array_expected(X),value_precede).
    
value_precede_aux(S,T,X), integer(S), integer(T) =>
    N = len(X),
    B = new_array(N+1),
    foreach (I in 1..N)
        Xis #= (X[i] #= S),
        Xis #=> B[I+1],
        #~ Xis #=> B[I] #= B[I+1],
        #~ B[I] #=> X[I] #!= T
    end,
	B[1] = 0.
value_precede_aux(S,T,_X) =>
    (integer(S) ->
        handle_exception($integer_expected(T),value_precede)
    ;
        handle_exception($integer_expected(S),value_precede)
    ).

